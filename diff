diff --git a/CMakeLists.txt b/CMakeLists.txt
index c043cde..f7bd601 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,6 @@
 cmake_minimum_required(VERSION 3.0)
 
-project(micro-service)
+project(glsm)
 
 # Configure required libraries ...
 if(UNIX) # Darwing or Linux
diff --git a/build/CMakeCache.txt b/build/CMakeCache.txt
index 5706e82..454c376 100644
--- a/build/CMakeCache.txt
+++ b/build/CMakeCache.txt
@@ -211,7 +211,7 @@ CMAKE_OBJCOPY:FILEPATH=/usr/bin/objcopy
 CMAKE_OBJDUMP:FILEPATH=/usr/bin/objdump
 
 //Value Computed by CMake
-CMAKE_PROJECT_NAME:STATIC=micro-service
+CMAKE_PROJECT_NAME:STATIC=glsm
 
 //Path to a program.
 CMAKE_RANLIB:FILEPATH=/usr/bin/ranlib
@@ -285,6 +285,12 @@ OPENSSL_SSL_LIBRARY:FILEPATH=/usr/lib64/libssl.so
 PKG_CONFIG_EXECUTABLE:FILEPATH=/usr/bin/pkg-config
 
 //Value Computed by CMake
+glsm_BINARY_DIR:STATIC=/home/gigasurv/rest_framework/micro-service/build
+
+//Value Computed by CMake
+glsm_SOURCE_DIR:STATIC=/home/gigasurv/rest_framework/micro-service
+
+//Value Computed by CMake
 micro-service_BINARY_DIR:STATIC=/home/gigasurv/rest_framework/micro-service/build
 
 //Value Computed by CMake
diff --git a/build/CMakeFiles/Makefile.cmake b/build/CMakeFiles/Makefile.cmake
index a1db90f..37da374 100644
--- a/build/CMakeFiles/Makefile.cmake
+++ b/build/CMakeFiles/Makefile.cmake
@@ -52,5 +52,5 @@ set(CMAKE_MAKEFILE_PRODUCTS
 
 # Dependency information for all targets:
 set(CMAKE_DEPEND_INFO_FILES
-  "CMakeFiles/micro-service.dir/DependInfo.cmake"
+  "CMakeFiles/glsm.dir/DependInfo.cmake"
   )
diff --git a/build/CMakeFiles/Makefile2 b/build/CMakeFiles/Makefile2
index 055f780..c653fa8 100644
--- a/build/CMakeFiles/Makefile2
+++ b/build/CMakeFiles/Makefile2
@@ -60,39 +60,39 @@ CMAKE_SOURCE_DIR = /home/gigasurv/rest_framework/micro-service
 CMAKE_BINARY_DIR = /home/gigasurv/rest_framework/micro-service/build
 
 #=============================================================================
-# Target rules for target CMakeFiles/micro-service.dir
+# Target rules for target CMakeFiles/glsm.dir
 
 # All Build rule for target.
-CMakeFiles/micro-service.dir/all:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/depend
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/build
-	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/gigasurv/rest_framework/micro-service/build/CMakeFiles --progress-num=1,2,3,4,5 "Built target micro-service"
-.PHONY : CMakeFiles/micro-service.dir/all
+CMakeFiles/glsm.dir/all:
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/depend
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/build
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/gigasurv/rest_framework/micro-service/build/CMakeFiles --progress-num=1,2,3,4,5 "Built target glsm"
+.PHONY : CMakeFiles/glsm.dir/all
 
 # Include target in all.
-all: CMakeFiles/micro-service.dir/all
+all: CMakeFiles/glsm.dir/all
 
 .PHONY : all
 
 # Build rule for subdir invocation for target.
-CMakeFiles/micro-service.dir/rule: cmake_check_build_system
+CMakeFiles/glsm.dir/rule: cmake_check_build_system
 	$(CMAKE_COMMAND) -E cmake_progress_start /home/gigasurv/rest_framework/micro-service/build/CMakeFiles 5
-	$(MAKE) -f CMakeFiles/Makefile2 CMakeFiles/micro-service.dir/all
+	$(MAKE) -f CMakeFiles/Makefile2 CMakeFiles/glsm.dir/all
 	$(CMAKE_COMMAND) -E cmake_progress_start /home/gigasurv/rest_framework/micro-service/build/CMakeFiles 0
-.PHONY : CMakeFiles/micro-service.dir/rule
+.PHONY : CMakeFiles/glsm.dir/rule
 
 # Convenience name for target.
-micro-service: CMakeFiles/micro-service.dir/rule
+glsm: CMakeFiles/glsm.dir/rule
 
-.PHONY : micro-service
+.PHONY : glsm
 
 # clean rule for target.
-CMakeFiles/micro-service.dir/clean:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/clean
-.PHONY : CMakeFiles/micro-service.dir/clean
+CMakeFiles/glsm.dir/clean:
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/clean
+.PHONY : CMakeFiles/glsm.dir/clean
 
 # clean rule for target.
-clean: CMakeFiles/micro-service.dir/clean
+clean: CMakeFiles/glsm.dir/clean
 
 .PHONY : clean
 
diff --git a/build/CMakeFiles/TargetDirectories.txt b/build/CMakeFiles/TargetDirectories.txt
index c7edfd2..7655a21 100644
--- a/build/CMakeFiles/TargetDirectories.txt
+++ b/build/CMakeFiles/TargetDirectories.txt
@@ -1,3 +1,3 @@
 /home/gigasurv/rest_framework/micro-service/build/CMakeFiles/rebuild_cache.dir
 /home/gigasurv/rest_framework/micro-service/build/CMakeFiles/edit_cache.dir
-/home/gigasurv/rest_framework/micro-service/build/CMakeFiles/micro-service.dir
+/home/gigasurv/rest_framework/micro-service/build/CMakeFiles/glsm.dir
diff --git a/build/CMakeFiles/micro-service.dir/source/main.cpp.o b/build/CMakeFiles/micro-service.dir/source/main.cpp.o
index 898ea42..6412568 100644
Binary files a/build/CMakeFiles/micro-service.dir/source/main.cpp.o and b/build/CMakeFiles/micro-service.dir/source/main.cpp.o differ
diff --git a/build/Makefile b/build/Makefile
index 96f8ce3..3c86feb 100644
--- a/build/Makefile
+++ b/build/Makefile
@@ -111,17 +111,17 @@ depend:
 .PHONY : depend
 
 #=============================================================================
-# Target rules for targets named micro-service
+# Target rules for targets named glsm
 
 # Build rule for target.
-micro-service: cmake_check_build_system
-	$(MAKE) -f CMakeFiles/Makefile2 micro-service
-.PHONY : micro-service
+glsm: cmake_check_build_system
+	$(MAKE) -f CMakeFiles/Makefile2 glsm
+.PHONY : glsm
 
 # fast build rule for target.
-micro-service/fast:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/build
-.PHONY : micro-service/fast
+glsm/fast:
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/build
+.PHONY : glsm/fast
 
 source/foundation/basic_controller.o: source/foundation/basic_controller.cpp.o
 
@@ -129,7 +129,7 @@ source/foundation/basic_controller.o: source/foundation/basic_controller.cpp.o
 
 # target to build an object file
 source/foundation/basic_controller.cpp.o:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/foundation/basic_controller.cpp.o
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/foundation/basic_controller.cpp.o
 .PHONY : source/foundation/basic_controller.cpp.o
 
 source/foundation/basic_controller.i: source/foundation/basic_controller.cpp.i
@@ -138,7 +138,7 @@ source/foundation/basic_controller.i: source/foundation/basic_controller.cpp.i
 
 # target to preprocess a source file
 source/foundation/basic_controller.cpp.i:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/foundation/basic_controller.cpp.i
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/foundation/basic_controller.cpp.i
 .PHONY : source/foundation/basic_controller.cpp.i
 
 source/foundation/basic_controller.s: source/foundation/basic_controller.cpp.s
@@ -147,7 +147,7 @@ source/foundation/basic_controller.s: source/foundation/basic_controller.cpp.s
 
 # target to generate assembly for a file
 source/foundation/basic_controller.cpp.s:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/foundation/basic_controller.cpp.s
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/foundation/basic_controller.cpp.s
 .PHONY : source/foundation/basic_controller.cpp.s
 
 source/foundation/network_utils.o: source/foundation/network_utils.cpp.o
@@ -156,7 +156,7 @@ source/foundation/network_utils.o: source/foundation/network_utils.cpp.o
 
 # target to build an object file
 source/foundation/network_utils.cpp.o:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/foundation/network_utils.cpp.o
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/foundation/network_utils.cpp.o
 .PHONY : source/foundation/network_utils.cpp.o
 
 source/foundation/network_utils.i: source/foundation/network_utils.cpp.i
@@ -165,7 +165,7 @@ source/foundation/network_utils.i: source/foundation/network_utils.cpp.i
 
 # target to preprocess a source file
 source/foundation/network_utils.cpp.i:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/foundation/network_utils.cpp.i
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/foundation/network_utils.cpp.i
 .PHONY : source/foundation/network_utils.cpp.i
 
 source/foundation/network_utils.s: source/foundation/network_utils.cpp.s
@@ -174,7 +174,7 @@ source/foundation/network_utils.s: source/foundation/network_utils.cpp.s
 
 # target to generate assembly for a file
 source/foundation/network_utils.cpp.s:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/foundation/network_utils.cpp.s
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/foundation/network_utils.cpp.s
 .PHONY : source/foundation/network_utils.cpp.s
 
 source/main.o: source/main.cpp.o
@@ -183,7 +183,7 @@ source/main.o: source/main.cpp.o
 
 # target to build an object file
 source/main.cpp.o:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/main.cpp.o
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/main.cpp.o
 .PHONY : source/main.cpp.o
 
 source/main.i: source/main.cpp.i
@@ -192,7 +192,7 @@ source/main.i: source/main.cpp.i
 
 # target to preprocess a source file
 source/main.cpp.i:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/main.cpp.i
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/main.cpp.i
 .PHONY : source/main.cpp.i
 
 source/main.s: source/main.cpp.s
@@ -201,7 +201,7 @@ source/main.s: source/main.cpp.s
 
 # target to generate assembly for a file
 source/main.cpp.s:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/main.cpp.s
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/main.cpp.s
 .PHONY : source/main.cpp.s
 
 source/microsvc_controller.o: source/microsvc_controller.cpp.o
@@ -210,7 +210,7 @@ source/microsvc_controller.o: source/microsvc_controller.cpp.o
 
 # target to build an object file
 source/microsvc_controller.cpp.o:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/microsvc_controller.cpp.o
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/microsvc_controller.cpp.o
 .PHONY : source/microsvc_controller.cpp.o
 
 source/microsvc_controller.i: source/microsvc_controller.cpp.i
@@ -219,7 +219,7 @@ source/microsvc_controller.i: source/microsvc_controller.cpp.i
 
 # target to preprocess a source file
 source/microsvc_controller.cpp.i:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/microsvc_controller.cpp.i
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/microsvc_controller.cpp.i
 .PHONY : source/microsvc_controller.cpp.i
 
 source/microsvc_controller.s: source/microsvc_controller.cpp.s
@@ -228,7 +228,7 @@ source/microsvc_controller.s: source/microsvc_controller.cpp.s
 
 # target to generate assembly for a file
 source/microsvc_controller.cpp.s:
-	$(MAKE) -f CMakeFiles/micro-service.dir/build.make CMakeFiles/micro-service.dir/source/microsvc_controller.cpp.s
+	$(MAKE) -f CMakeFiles/glsm.dir/build.make CMakeFiles/glsm.dir/source/microsvc_controller.cpp.s
 .PHONY : source/microsvc_controller.cpp.s
 
 # Help Target
@@ -239,7 +239,7 @@ help:
 	@echo "... depend"
 	@echo "... rebuild_cache"
 	@echo "... edit_cache"
-	@echo "... micro-service"
+	@echo "... glsm"
 	@echo "... source/foundation/basic_controller.o"
 	@echo "... source/foundation/basic_controller.i"
 	@echo "... source/foundation/basic_controller.s"
diff --git a/build/micro-service b/build/micro-service
index dc00902..ec0c43c 100755
Binary files a/build/micro-service and b/build/micro-service differ
diff --git a/source/foundation/include/basic_controller.hpp b/source/foundation/include/basic_controller.hpp
index 5a16e5c..5893d2e 100644
--- a/source/foundation/include/basic_controller.hpp
+++ b/source/foundation/include/basic_controller.hpp
@@ -54,4 +54,4 @@ namespace cfx {
 
         std::vector<utility::string_t> requestPath(const http_request & message);
     };
-}
\ No newline at end of file
+}
diff --git a/source/foundation/include/controller.hpp b/source/foundation/include/controller.hpp
index e39ff5c..2a7e6b6 100644
--- a/source/foundation/include/controller.hpp
+++ b/source/foundation/include/controller.hpp
@@ -50,4 +50,4 @@ namespace cfx {
         virtual void handleConnect(http_request message) = 0;
         virtual void handleMerge(http_request message) = 0;
     };
-}
\ No newline at end of file
+}
diff --git a/source/main.cpp b/source/main.cpp
index d37c5d3..d9ede37 100644
--- a/source/main.cpp
+++ b/source/main.cpp
@@ -31,19 +31,30 @@
 
 #include "microsvc_controller.hpp"
 
+
+#define MAJOR_VERSION "0"
+#define MINOR_VERSION "1"
+
 using namespace web;
 using namespace cfx;
 
 int main(int argc, const char * argv[]) {
+
+	utility::string_t port = U("18180");
+	if(argc == 2)
+	{
+		port = argv[1];
+	}
+	utility::string_t defaultRoute = "http://host_auto_ip4:" + port + "/v" + MINOR_VERSION;
     InterruptHandler::hookSIGINT();
 
+	
     MicroserviceController server;
-    server.setEndpoint("http://host_auto_ip4:6502/v1/ivmero/api");
-    
+    server.setEndpoint(defaultRoute);
     try {
         // wait for server initialization...
         server.accept().wait();
-        std::cout << "Modern C++ Microservice now listening for requests at: " << server.endpoint() << '\n';
+        std::cout << "GLSM now listening for requests at: " << server.endpoint() << '\n';
         
         InterruptHandler::waitForUserInterrupt();
 
diff --git a/source/microsvc_controller.cpp b/source/microsvc_controller.cpp
index 1abbc6e..81567c6 100644
--- a/source/microsvc_controller.cpp
+++ b/source/microsvc_controller.cpp
@@ -26,49 +26,87 @@
 
 #include <std_micro_service.hpp>
 #include "microsvc_controller.hpp"
+#include "glsm_utils.hpp"
 
 using namespace web;
 using namespace http;
+using namespace glsm;
 
 void MicroserviceController::initRestOpHandlers() {
     _listener.support(methods::GET, std::bind(&MicroserviceController::handleGet, this, std::placeholders::_1));
     _listener.support(methods::PUT, std::bind(&MicroserviceController::handlePut, this, std::placeholders::_1));
     _listener.support(methods::POST, std::bind(&MicroserviceController::handlePost, this, std::placeholders::_1));
     _listener.support(methods::DEL, std::bind(&MicroserviceController::handleDelete, this, std::placeholders::_1));
-    _listener.support(methods::PATCH, std::bind(&MicroserviceController::handlePatch, this, std::placeholders::_1));
 }
 
 void MicroserviceController::handleGet(http_request message) {
-    auto path = requestPath(message);
+    auto path = requestPath(message); //same as "path = http::uri::split_path(http::uri::decode(message.relative_uri().path()));"
     if (!path.empty()) {
+		if(path[1] == "monitoring" && path[2] == "current")
+		{
+			//TODO : do get status 
+
+            auto response = json::value::object();
+            response["byteIn"] = json::value::string("123456");
+            response["status"] = json::value::string("ready!");
+            message.reply(status_codes::OK, response);
+		}
+
+	//	int camid = std::stoi(path[0]);
+	//	auto response = 
+/*
         if (path[0] == "service" && path[1] == "test") {
             auto response = json::value::object();
             response["version"] = json::value::string("0.1.1");
             response["status"] = json::value::string("ready!");
             message.reply(status_codes::OK, response);
-        }
+        }*/
+		else
+		{
+        	message.reply(status_codes::NotFound);
+		}
     }
     else {
         message.reply(status_codes::NotFound);
     }
 }
 
-void MicroserviceController::handlePatch(http_request message) {
-    message.reply(status_codes::NotImplemented, responseNotImpl(methods::PATCH));
-}
-
 void MicroserviceController::handlePut(http_request message) {
     message.reply(status_codes::NotImplemented, responseNotImpl(methods::PUT));
 }
 
 void MicroserviceController::handlePost(http_request message) {
-    message.reply(status_codes::NotImplemented, responseNotImpl(methods::POST));
+   auto path = requestPath(message); //same as "path = http::uri::split_path(http::uri::decode(message.relative_uri().path()));"
+    if (!path.empty()) {
+//    	auto response = json::value::object();
+//    	auto glsm = new GlsmParserBase();
+//    	auto response = glsm.doProcess(message.extract_json().get());
+//		std::cout<<glsmUtils::DisplayJSONValue(message.extract_json().get())<<std::endl;
+/*		auto req = message.extract_json().get();
+		//for( auto iter = req.as_array().begin(); iter != req.as_array().end(); ++iter)
+		for( auto iter = req.as_object().cbegin(); iter != req.as_object().cend(); ++iter)
+		{
+			std::cout<<"\""<<iter->first <<"\":"<<iter->second <<std::endl;
+		}
+*/
+		auto response = json::value::object();
+//		response["data"] = json::value::null();
+//		response["message"] = json::value::string("");
+//		response["success"] = json::value::boolean(true);
+		message.reply(status_codes::OK, response);
+	}
+	else
+	{
+		message.reply(status_codes::NotFound);
+	}
 }
 
 void MicroserviceController::handleDelete(http_request message) {    
     message.reply(status_codes::NotImplemented, responseNotImpl(methods::DEL));
 }
 
+
+/*
 void MicroserviceController::handleHead(http_request message) {
     message.reply(status_codes::NotImplemented, responseNotImpl(methods::HEAD));
 }
@@ -88,10 +126,10 @@ void MicroserviceController::handleConnect(http_request message) {
 void MicroserviceController::handleMerge(http_request message) {
     message.reply(status_codes::NotImplemented, responseNotImpl(methods::MERGE));
 }
-
+*/
 json::value MicroserviceController::responseNotImpl(const http::method & method) {
     auto response = json::value::object();
-    response["serviceName"] = json::value::string("C++ Mircroservice Sample");
+    response["serviceName"] = json::value::string("GLSM Service");
     response["http_method"] = json::value::string(method);
     return response ;
-}
\ No newline at end of file
+}
diff --git a/source/microsvc_controller.hpp b/source/microsvc_controller.hpp
index febd4d2..70b7b4a 100644
--- a/source/microsvc_controller.hpp
+++ b/source/microsvc_controller.hpp
@@ -37,15 +37,15 @@ public:
     void handleGet(http_request message) override;
     void handlePut(http_request message) override;
     void handlePost(http_request message) override;
-    void handlePatch(http_request message) override;
     void handleDelete(http_request message) override;
-    void handleHead(http_request message) override;
-    void handleOptions(http_request message) override;
-    void handleTrace(http_request message) override;
-    void handleConnect(http_request message) override;
-    void handleMerge(http_request message) override;
-    void initRestOpHandlers() override;    
+    virtual void handlePatch(http_request message) {;}
+    virtual void handleHead(http_request message) {;}
+    virtual void handleOptions(http_request message) {;}
+	virtual void handleTrace(http_request message) {;}
+    virtual void handleConnect(http_request message) {;}
+    virtual void handleMerge(http_request message) {;}
+    void initRestOpHandlers() override;
 
 private:
     static json::value responseNotImpl(const http::method & method);
-};
\ No newline at end of file
+};
diff --git a/tests/wrk/benchmark_microsvc.lua b/tests/wrk/benchmark_microsvc.lua
index a0f505e..69d3e65 100644
--- a/tests/wrk/benchmark_microsvc.lua
+++ b/tests/wrk/benchmark_microsvc.lua
@@ -23,10 +23,10 @@
 request = function()
    headers = {}
    headers["Content-Type"] = "application/json"
-   return wrk.format("GET", "/v1/ivmero/api/service/test", headers, "")
+   return wrk.format("GET", "001/monitoring/current", headers, "")
 end
 
 response = function(status, headers, body)
    -- comment the following line to avoid server's excesive I/O to console on heavy load
    -- io.write("response: \n" .. body .. "\n---------------------------------------------\n")
-end
\ No newline at end of file
+end
